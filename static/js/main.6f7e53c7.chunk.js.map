{"version":3,"sources":["actions/index.js","components/CharacterList.js","components/HeroList.js","components/SquadStats.js","components/App.js","reducers/helper.js","reducers/characters_reducer.js","reducers/heroes_reducers.js","reducers/index.js","index.js"],"names":["ADD_CHARACTER","REMOVE_CHARACTER","addCharacterById","id","type","removeCharacterById","CharacterList","console","log","this","props","className","characters","map","character","key","name","onClick","Component","connect","state","dispatch","bindActionCreators","HeroList","heroes","hero","SquadStats","strength","forEach","intelligence","speed","App","createCharacter","characters_json","find","ch","action","filter","item","rootReducer","combineReducers","store","createStore","subscribe","getState","ReactDOM","render","document","getElementById"],"mappings":"k9BAAaA,EAAgB,gBAChBC,EAAmB,mBAEzB,SAASC,EAAiBC,GAK7B,MAJe,CACXC,KAAMJ,EACNG,MAKD,SAASE,EAAoBF,GAKhC,MAJe,CACXC,KAAMH,EACNE,M,ICTFG,E,iLACO,IAAD,OAEJ,OADAC,QAAQC,IAAI,kBAAmBC,KAAKC,OAEhC,6BACI,0CACA,wBAAIC,UAAU,cAENF,KAAKC,MAAME,WAAWC,KAAK,SAAAC,GAEvB,OAAO,wBAAIC,IAAKD,EAAUX,GAAIQ,UAAU,mBACxC,yBAAKA,UAAU,aACVG,EAAUE,MAEf,yBAAKL,UAAU,yBAAyBM,QAAS,kBAAM,EAAKP,MAAMR,iBAAiBY,EAAUX,MAA7F,e,GAdAe,aAsCbC,mBAZf,SAAyBC,GAErB,OADAb,QAAQC,IAAI,aAAcY,GACnB,CACHR,WAAYQ,EAAMR,eAI1B,SAA4BS,GACxB,OAAOC,YAAmB,CAACpB,oBAAmBmB,KAInCF,CAA6Cb,GCtCtDiB,E,iLACO,IAAD,OACJ,OACI,6BACI,+CACA,wBAAIZ,UAAU,cAENF,KAAKC,MAAMc,OAAOX,KAAK,SAAAY,GAEnB,OAAO,wBAAIV,IAAKU,EAAKtB,GAAIQ,UAAU,mBAC/B,yBAAKA,UAAU,aACVc,EAAKT,MAEV,yBAAKL,UAAU,yBAAyBM,QAAS,kBAAM,EAAKP,MAAML,oBAAoBoB,EAAKtB,MAA3F,e,GAbTe,aAqCRC,mBAZf,SAAyBC,GAErB,OADAb,QAAQC,IAAI,aAAcY,GACnB,CACHI,OAAQJ,EAAMI,WAItB,SAA4BH,GACxB,OAAOC,YAAmB,CAACjB,uBAAqBgB,KAIrCF,CAA6CI,GCvCtDG,E,mLAGE,IAAIC,EAAW,EAEf,OADAlB,KAAKC,MAAMc,OAAOI,SAAS,SAAAH,GAAI,OAAIE,GAAYF,EAAKE,YAC7CA,I,qCAIP,IAAIE,EAAe,EAEnB,OADApB,KAAKC,MAAMc,OAAOI,SAAS,SAAAH,GAAI,OAAII,GAAgBJ,EAAKI,gBACjDA,I,8BAIP,IAAIC,EAAQ,EAEZ,OADArB,KAAKC,MAAMc,OAAOI,SAAS,SAAAH,GAAI,OAAIK,GAASL,EAAKK,SAC1CA,I,+BAIP,OACI,6BACI,2CACA,wBAAInB,UAAU,cACV,wBAAIA,UAAU,mBAAd,sBAAoDF,KAAKkB,YACzD,wBAAIhB,UAAU,mBAAd,0BAAwDF,KAAKoB,gBAC7D,wBAAIlB,UAAU,mBAAd,mBAAiDF,KAAKqB,e,GA3BjDZ,aAwCVC,mBANf,SAAyBC,GACrB,MAAO,CACHI,OAAQJ,EAAMI,UAIkB,KAAzBL,CAA+BO,GCV/BK,G,kBAzBX,aAAc,uE,sEAKV,OACI,yBAAKpB,UAAY,OACb,sDACA,6BACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,YACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,YACX,kBAAC,EAAD,a,GAlBNO,c,gBCLX,SAASc,EAAgB7B,GAE5B,OADgB8B,EAAgBC,MAAK,SAAAC,GAAE,OAAIA,EAAGhC,KAAOA,KCmB1CS,MAbf,WAAqD,IAAjCQ,EAAgC,uDAAxBa,EAAiBG,EAAO,uCAChD,OAAOA,EAAOhC,MACV,KAAKJ,EAED,OADiBoB,EAAMiB,QAAQ,SAAAC,GAAI,OAAIA,EAAKnC,KAAOiC,EAAOjC,MAE9D,KAAKF,EAED,MADkB,sBAAOmB,GAAP,CAAcY,EAAgBI,EAAOjC,MAE3D,QACI,OAAOiB,ICGJI,MAbf,WAAoC,IAApBJ,EAAmB,uDAAX,GAAIgB,EAAO,uCAC/B,OAAOA,EAAOhC,MACV,KAAKJ,EAED,MADU,sBAAOoB,GAAP,CAAcY,EAAgBI,EAAOjC,MAEnD,KAAKF,EAED,OADiBmB,EAAMiB,QAAQ,SAAAZ,GAAI,OAAIA,EAAKtB,IAAMiC,EAAOjC,MAE7D,QACI,OAAOiB,ICRJmB,EALKC,YAAgB,CAChC5B,aACAY,WCMEiB,EAAQC,YAAYH,GAO1BE,EAAME,WAAW,kBAAMpC,QAAQC,IAAI,mBAAoBiC,EAAMG,eAK7DH,EAAMpB,SAASnB,EAAiB,IAEhC2C,IAASC,OACT,kBAAC,IAAD,CAAUL,MAASA,GACf,kBAAC,EAAD,OAEHM,SAASC,eAAe,W","file":"static/js/main.6f7e53c7.chunk.js","sourcesContent":["export const ADD_CHARACTER = 'ADD_CHARACTER';\nexport const REMOVE_CHARACTER = 'REMOVE_CHARACTER';\n\nexport function addCharacterById(id){\n    const action = {\n        type: ADD_CHARACTER,\n        id\n    }\n    return action;\n}\n\nexport function removeCharacterById(id){\n    const action = {\n        type: REMOVE_CHARACTER,\n        id\n    }\n    return action;\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addCharacterById } from '../actions/index';\n\nclass CharacterList extends Component{\n    render(){\n        console.log(\"Charlist props \", this.props);\n        return (\n            <div>\n                <h4>Characters</h4>\n                <ul className=\"list-group\">\n                    {\n                        this.props.characters.map( character =>\n                        {\n                            return <li key={character.id} className=\"list-group-item\">\n                            <div className=\"list-item\">\n                                {character.name}\n                            </div>\n                            <div className=\"list-item right-button\" onClick={() => this.props.addCharacterById(character.id)}>\n                                +\n                            </div>\n                            </li>\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    console.log('Map State ', state);\n    return {\n        characters: state.characters\n    };\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({addCharacterById}, dispatch);\n}\n\n// The connect() function helps to connect a React component to a Redux store.\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterList);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { removeCharacterById } from '../actions/index';\n\nclass HeroList extends Component{\n    render(){\n        return (\n            <div>\n                <h4>Selected Heroes</h4>\n                <ul className=\"list-group\">\n                    {\n                        this.props.heroes.map( hero =>\n                        {\n                            return <li key={hero.id} className=\"list-group-item\">\n                                <div className=\"list-item\">\n                                    {hero.name}\n                                </div>\n                                <div className=\"list-item right-button\" onClick={() => this.props.removeCharacterById(hero.id)}>\n                                    -\n                                </div>\n                            </li>\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    console.log('Map State ', state);\n    return {\n        heroes: state.heroes\n    };\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({removeCharacterById},dispatch);\n}\n\n// The connect() function helps to connect a React component to a Redux store.\nexport default connect(mapStateToProps, mapDispatchToProps)(HeroList);","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nclass SquadStats extends Component{\n\n    strength(){\n        let strength = 0;\n        this.props.heroes.forEach( hero => strength += hero.strength)\n        return strength;\n    }\n\n    intelligence(){\n        let intelligence = 0;\n        this.props.heroes.forEach( hero => intelligence += hero.intelligence)\n        return intelligence;\n    }\n\n    speed(){\n        let speed = 0;\n        this.props.heroes.forEach( hero => speed += hero.speed)\n        return speed;\n    }\n\n    render(){\n        return (\n            <div>\n                <h4>Squad Stats</h4>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Overall Strength : {this.strength()}</li>\n                    <li className=\"list-group-item\">Overall Intelligence : {this.intelligence()}</li>\n                    <li className=\"list-group-item\">Overall Speed : {this.speed()}</li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        heroes: state.heroes\n    };\n}\n\nexport default connect(mapStateToProps, null)(SquadStats);","import React, {Component} from 'react'\nimport CharacterList from './CharacterList';\nimport HeroList from './HeroList';\nimport SquadStats from './SquadStats';\n\nimport '../styles/index.css'\n\nclass App extends Component{\n    constructor(){\n        super();\n    }\n\n    render(){\n        return ( \n            <div className = \"App\">\n                <h1>Superhero team builder</h1>\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <CharacterList></CharacterList>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <HeroList></HeroList>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <SquadStats></SquadStats>\n                    </div>\n                </div>\n            </div> \n        )\n    }\n}\n\nexport default App;","import characters_json from \"../data/characters.json\";\n\nexport function createCharacter(id){\n    let character = characters_json.find(ch => ch.id === id);\n    return character;\n}","import characters_json from '../data/characters.json';\nimport { ADD_CHARACTER, REMOVE_CHARACTER } from '../actions'\nimport {createCharacter} from './helper';\n\n/*\n    1) When we select a hero, we need to remove it from the list\n    2) When we remove a hero, we need to add it to characterList \n*/\n\nfunction characters(state = characters_json, action){\n    switch(action.type){\n        case ADD_CHARACTER:\n            let characters = state.filter( item => item.id !== action.id);\n            return characters;\n        case REMOVE_CHARACTER:\n            let new_characters = [...state, createCharacter(action.id)]\n            return new_characters;\n        default: \n            return state;\n    }\n}\n\nexport default characters;","import {createCharacter} from './helper';\nimport { ADD_CHARACTER, REMOVE_CHARACTER } from '../actions';\n\n\n/*\n    1) When we add a character, add the that to heroes\n    2) \n*/\nfunction heroes(state = [], action){\n    switch(action.type){\n        case ADD_CHARACTER:\n            let heroes = [...state, createCharacter(action.id)]\n            return heroes;\n        case REMOVE_CHARACTER:\n            let new_heroes = state.filter( hero => hero.id != action.id);\n            return new_heroes;\n        default: \n            return state;\n    }\n}\n\nexport default heroes;","import { combineReducers } from 'redux';\nimport characters from './characters_reducer';\nimport heroes from './heroes_reducers';\n\nconst rootReducer = combineReducers({\n    characters,\n    heroes\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport rootReducer from './reducers/index';\n\nimport {createStore} from 'redux'; \nimport {Provider} from 'react-redux'\n\n// Lets import an action\nimport {addCharacterById} from './actions/index';\n\n// Create a redux store \nconst store = createStore(rootReducer);\n\n/*\n    Adds a change listener. It will be called any time an action is dispatched, \n    and some part of the state tree may potentially have changed. You may then \n    call getState() to read the current state tree inside the callback.\n*/\nstore.subscribe( () => console.log('Subscribe Called', store.getState()));\n\n/*\n    Dispatches an action. This is the only way to trigger a state change.\n*/\nstore.dispatch(addCharacterById(2));\n\nReactDOM.render(\n<Provider store = {store}>\n    <App/>\n</Provider>\n,document.getElementById('root'));"],"sourceRoot":""}